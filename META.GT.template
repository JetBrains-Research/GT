description = "Generic transformers for algebraic types"
requires = "ppxlib"
archive(byte) = "GTlib.cma"
archive(native) = "GTlib.cmxa"

package "common" (
  description = ""
  directory = "common"
  requires = "ppxlib,ocamlgraph"
  archive(byte)    = "GTCommon.cma"
  archive(native)  = "GTCommon.cmxa"

)
package "ppx" (
  description = "PPX syntax extensionon top of ppx_core"

  requires(ppx_driver)        = "ocamlgraph ppxlib GT.syntax.show"

  archive(ppx_driver,byte)    = "ppx_deriving_gt.cma"
  archive(ppx_driver,native)  = "ppx_deriving_gt.cmxa gfmt.cmx gmap.cmx foldl.cmx foldr.cmx compare.cmx eq.cmx stateful.cmx html.cmx hash.cmx"
  plugin(ppx_driver,byte)     = "ppx_deriving_gt.cma"
  plugin(ppx_driver,native)   = "ppx_deriving_gt.cmxs"
  exists_if = "ppx_deriving_gt.cma"

  # This line makes things transparent for people mixing preprocessors
  # and normal dependencies
  requires(-ppx_driver) = ""
  ppx(-ppx_driver,-custom_ppx) = "./pp_gt.native --as-ppx"
)

package "ppx_gt" (
  description = "A library for easy linking to preprocessor executable"
  # TODO: we need to specify plugins for bytecode too, isn't it
  archive(byte)    = "ppx_deriving_gt.cma"
  archive(native)  = "ppx_deriving_gt.cmxa  gfmt.cmx gmap.cmx foldl.cmx foldr.cmx compare.cmx eq.cmx stateful.cmx html.cmx hash.cmx"
  requires(native) = "base ppxlib ocamlgraph GT.syntax.show"

)
package "expander" (
  description = "Contains code that actually generates the code"
  archive(byte)   = "GTCommon.cma"
  archive(native) = "GTCommon.cmxa"
  requires = "ppxlib ocamlgraph"
)

# TODO: maybe plugins aren't requiring GT.syntax since we support PPX too?
package "syntax" (
  #description = "Camlp5 syntax extension for generic transformers"
  #requires = "camlp5,ppxlib,ocamlgraph"

  #archive(syntax,preprocessor) = "GTCommon.cma pa_gt.cma"
  #archive(syntax,toploop)      = "GTCommon.cma pa_gt.cma"
  #archive(syntax,native,preprocessor) = "GTCommon.cmxa pa_gt.cmxa"
  #archive(syntax,native,toploop)      = "GTCommon.cmxa pa_gt.cmxa"

  package "compare" (
    description = "Plugin 'compare'"
    requires = "GT-p5"
    archive(syntax,preprocessor) = "compare.cmo"
    archive(syntax,toploop)      = "compare.cmo"
    archive(syntax,native,preprocessor) = "compare.cmx"
    archive(syntax,native,toploop)      = "compare.cmx"
  )
  package "show" (
    description = "Plugin 'show'"
    directory = "syntax/show"
    requires = "GT-p5"
    archive(syntax,preprocessor) = "show.cma"
    archive(syntax,toploop) = "show.cma"
    archive(syntax,native,preprocessor) = "show.cmxa"
    archive(syntax,native,toploop)      = "show.cmxa"
  )
  package "fmt" (
    description = "Plugin 'fmt'"
    requires = "GT-p5"
    archive(syntax,preprocessor) = "gfmt.cmo"
    archive(syntax,toploop) = "gfmt.cmo"
    archive(syntax,native,preprocessor) = "gfmt.cmx"
    archive(syntax,native,toploop)      = "gfmt.cmx"
  )
  package "htmlTy" (
    description = "Plugin 'html' for HTML generation based on TyXML library"
    requires = "GT.syntax tyxml"
    archive(syntax,preprocessor) = "htmlTy.cmo"
    exists_if               = "htmlTy.cmo"
    archive(syntax,toploop) = "htmlTy.cmo"
  )
  package "html" (
    description = "Plugin 'html' with custom HTML library (legacy)"
    requires = "GT.syntax"
    archive(syntax,preprocessor) = "html.cmo"
    archive(syntax,toploop) = "html.cmo"
    archive(syntax,native,preprocessor) = "html.cmx"
    archive(syntax,native,toploop)      = "html.cmx"
  )
  package "eq" (
    description = "Plugin 'eq'"
    requires = "GT.syntax"
    archive(syntax,preprocessor) = "eq.cmo"
    archive(syntax,toploop) = "eq.cmo"
    archive(syntax,native,preprocessor) = "eq.cmx"
    archive(syntax,native,toploop)      = "eq.cmx"
  )
  package "foldl" (
    description = "Plugin 'foldl'"
    requires = "GT.syntax"
    archive(syntax,preprocessor) = "foldl.cmo"
    archive(syntax,toploop) = "foldl.cmo"
    archive(syntax,native,preprocessor) = "foldl.cmx"
    archive(syntax,native,toploop)      = "foldl.cmx"
  )
  package "foldr" (
    description = "Plugin 'foldr'"
    requires = "GT.syntax"
    archive(syntax,preprocessor) = "foldr.cmo"
    archive(syntax,toploop) = "foldr.cmo"
    archive(syntax,native,preprocessor) = "foldr.cmx"
    archive(syntax,native,toploop)      = "foldr.cmx"
  )
  package "map" (
    description = "Plugin 'map'"
    requires = "GT.syntax"
    archive(syntax,preprocessor) = "gmap.cmo"
    archive(syntax,toploop) = "gmap.cmo"
    archive(syntax,native,preprocessor) = "gmap.cmx"
    archive(syntax,native,toploop)      = "gmap.cmx"
  )
  package "hash" (
    description = "Plugin 'hash' for hash consing"
    requires = "GT.syntax"
    archive(syntax,preprocessor) = "hash.cmo"
    archive(syntax,toploop) = "hash.cmo"
    archive(syntax,native,preprocessor) = "hash.cmx"
    archive(syntax,native,toploop)      = "hash.cmx"
  )
  package "eval" (
    description = "Plugin 'eval' for evaluating AST with environment"
    requires = "GT.syntax"
    archive(syntax,preprocessor) = "eval.cmo"
    archive(syntax,toploop) = "eval.cmo"
    archive(syntax,native,preprocessor) = "eval.cmx"
    archive(syntax,native,toploop)      = "eval.cmx"
  )
  package "stateful" (
    description = "Plugin 'staeful': like `eval` but return updated environment too"
    requires = "GT.syntax"
    archive(syntax,preprocessor)        = "stateful.cmo"
    archive(syntax,toploop)             = "stateful.cmo"
    archive(syntax,native,preprocessor) = "stateful.cmx"
    archive(syntax,native,toploop)      = "stateful.cmx"
  )

  package "all" (
    description = "All supported syntaxes"
    directory = "syntax/all"

    requires(syntax,preprocessor) = "GT.syntax.fmt, GT.syntax.compare, GT.syntax.eq, GT.syntax.foldl, GT.syntax.foldr, GT.syntax.map, GT.syntax.eval, GT.syntax.stateful, GT.syntax.html, GT.syntax.hash"
    requires(syntax,toploop)      = "GT.syntax.fmt, GT.syntax.compare, GT.syntax.eq, GT.syntax.foldl, GT.syntax.foldr, GT.syntax.map, GT.syntax.eval, GT.syntax.stateful, GT.syntax.html, GT.syntax.hash"
    requires(syntax,native,preprocessor) = "GT.syntax.fmt, GT.syntax.compare, GT.syntax.eq, GT.syntax.foldl, GT.syntax.foldr, GT.syntax.map, GT.syntax.eval, GT.syntax.stateful, GT.syntax.html, GT.syntax.hash"
    requires(syntax,native,toploop)      = "GT.syntax.fmt, GT.syntax.compare, GT.syntax.eq, GT.syntax.foldl, GT.syntax.foldr, GT.syntax.map, GT.syntax.eval, GT.syntax.stateful, GT.syntax.html, GT.syntax.hash"

    # dirty hack: if we leave RHS empty then querying ocamlfind will be broken
    archive(syntax,preprocessor) = "show.cmo"
    archive(syntax,native,preprocessor) = "show.cmx"
  )
)
